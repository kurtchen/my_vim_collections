" Functions {{{
    " toggle absolute/relative line number {{{
    function! s:NumberToggle()
      if(&relativenumber == 1)
        set number
      else
        set relativenumber
      endif
    endfunc
    "}}}

    " init rtp for the custom plugins {{{
    function! s:InitCustomPlugins()
        if exists('g:my_vim_collections_dir')
            let l:files = split(globpath(expand(g:my_vim_collections_dir),'*'), '\n')
            for l:f in l:files
                if isdirectory(l:f)
                    let &runtimepath.=','.l:f
                endif
            endfor
        endif
    endfunc
    "}}}

    " init rtp for the custom plugins {{{
    function! s:ReplaceCurrentWord()
        execute ':%s/\<'.expand('<cword>').'\>/'.@".'/gc'
    endfunc
    "}}}

    " help current word {{{
    function! s:HelpCurrentWord()
        execute ':h expand("<cword>")<CR>'
    endfunc
    "}}}

    " Use grep to lookup file {{{
    function! g:MyLookupFileFunc(pattern)
        if len(a:pattern) == 0
            return []
        endif

        let dir = getcwd()

        if (!exists('s:my_lookup_tag_file'))
            let s:my_lookup_tag_file = 'myfilenametags'
        endif

        while dir != '/' && !filereadable(dir.'/'.s:my_lookup_tag_file)
            let dir = fnamemodify(dir, ':h')
        endwhile

        if filereadable(dir.'/'.s:my_lookup_tag_file)
            let grepResult = system('grep -i '.a:pattern.' '.dir.'/'.s:my_lookup_tag_file)
            return split(grepResult, '\n')
        endif

        return []
    endfunc
    "}}}

    " Use grep to lookup file {{{
    function! s:MyFindConfigFile(fileName)
        if len(a:fileName) == 0
            return ''
        endif

        let dir = getcwd()

        while dir != '/' && !filereadable(dir.'/'.a:fileName)
            let dir = fnamemodify(dir, ':h')
        endwhile

        if filereadable(dir.'/'.a:fileName)
            return dir.'/'.a:fileName
        endif

        return ''
    endfunc
    "}}}

    " cd to Android root{{{
    function! s:MyCd2AndroidRoot()
        let topfile = 'build/core/envsetup.mk'
        let dir = getcwd()

        while dir != '/' && !filereadable(dir.'/'.topfile)
            let dir = fnamemodify(dir, ':h')
        endwhile

        if filereadable(dir.'/'.topfile)
            execute ':lcd '.dir
        endif
    endfunc
    "}}}

    " cd to repo root{{{
    function! s:MyCd2RepoRoot(fileName)
        let topfile = '.git'
        if len(a:fileName) == 0
            let dir = getcwd()
        else
            let dir = expand(a:fileName)
        endif

        while dir != '/' && !isdirectory(dir.'/'.topfile)
            let dir = fnamemodify(dir, ':h')
        endwhile

        if isdirectory(dir.'/'.topfile)
            execute ':lcd '.dir
        endif
    endfunc
    "}}}

    " Close all buffer at a time{{{
    function! s:CloseAllBuffers(pattern)
        let bufNr = bufnr('$')
        let deletedCount = 0
        while bufNr > 0
            if buflisted(bufNr)
                if a:pattern == '' || matchstr(bufname(bufNr), '.'.a:pattern.'$') == '.'.a:pattern
                    if getbufvar(bufNr, '&modified') == 0
                        execute 'bd '.bufNr
                        let deletedCount = deletedCount + 1
                    endif
                endif
            endif
            let bufNr = bufNr - 1
        endwhile
        echomsg deletedCount 'buffer(s) deleted'
    endfunction
    "}}}

    " Close all but current buffer at a time{{{
    function! s:CloseOtherBuffers()
        let bufNr = bufnr('$')
        let curBufNr = bufnr('%')
        let deletedCount = 0
        while bufNr > 0
            if buflisted(bufNr)
                if bufNr != curBufNr && getbufvar(bufNr, '&modified') == 0
                    execute 'bd '.bufNr
                    let deletedCount = deletedCount + 1
                endif
            endif
            let bufNr = bufNr - 1
        endwhile
        echomsg deletedCount 'buffer(s) deleted'
    endfunction
    "}}}

    " Add tags file to &tags {{{
    function! s:AddTags(tagName)
        if exists('g:my_tags_path') && has_key(g:my_tags_path, a:tagName)
            call s:AddTagsByPath(g:my_tags_path[a:tagName])
        else
            if !exists('g:my_tags_path')
                echomsg 'warning: g:my_python_tags_path not defined'
            endif

            call s:AddTagsByPath(a:tagName)
        endif

        echomsg '&tags=' . &tags
    endfunction

    function! s:AddTagsByPath(tagPath)
        if stridx(&tags, a:tagPath) == -1
            if strlen(&tags) == 0
                let &tags = a:tagPath
            else
                let &tags = &tags . "," . a:tagPath
            endif
        endif
    endfunction
    "}}}

    " Remove tags file from &tags {{{
    function! s:RemoveTags(tagName)
        if exists('g:my_tags_path') && has_key(g:my_tags_path, a:tagName)
            call s:RemoveTagsByPath(g:my_tags_path[a:tagName])
        else
            if !exists('g:my_tags_path')
                echomsg 'warning: g:my_python_tags_path not defined'
            endif

            call s:RemoveTagsByPath(a:tagName)
        endif

        echomsg '&tags=' . &tags
    endfunction

    function! s:RemoveTagsByPath(tagPath)
        let tagPathIndex = stridx(&tags, a:tagPath)
        if tagPathIndex != -1
            let tagPathEndIndex = tagPathIndex + strlen(a:tagPath)
            let tagPathSeg1 = strpart(&tags, 0, tagPathIndex)
            let tagPathSeg2 = strpart(&tags, tagPathEndIndex)
            let tagPathSeg1Len = strlen(tagPathSeg1)
            if tagPathSeg1Len > 0 && strpart(tagPathSeg1, tagPathSeg1Len - 1) == ","
                if tagPathSeg1Len == 1
                    let tagPathSeg1 = ""
                else
                    let tagPathSeg1 = strpart(tagPathSeg1, 0, tagPathSeg1Len - 1)
                endif
            endif
            let &tags = tagPathSeg1 . tagPathSeg2
        endif
    endfunction
    "}}}

    " Display &tags {{{
    function! s:ListTags()
        echomsg '&tags=' . &tags
    endfunction
    "}}}
"}}}

" My Pluggins {{{
    " Use my lookup method{{{
    let g:LookupFile_TagExpr = string('./filenametags')
    let g:LookupFile_LookupFunc = function('g:MyLookupFileFunc')
    "}}}

    if filereadable(expand('~/.vimrc.local.local'))
        source ~/.vimrc.local.local
    endif

    call s:InitCustomPlugins()
"}}}

" Basic Settings {{{

    " LaTex Suite
    filetype plugin on
    if has('win32') || has('win64')
        set shellslash
    endif
    set grepprg=grep\ -nH\ $*
    let g:tex_flavor='latex'

    " disable mouse
    " set mouse-=a

    " 256 color
    set t_Co=256

    " utf8
    set encoding=utf8

    " Highlight trailing whitespace
    match ErrorMsg /\s\+$/
"}}}

" spf-13 Configurations {{{
    " disable auto removing trailing whitespace
    let g:spf13_keep_trailing_whitespace = 1

    " disable indent guides
    let g:indent_guides_enable_on_vim_startup = 0

"}}}

" CSCOPE SETTINGS{{{
    if has("cscope")
        "set csprg=/home/kurt/bin/cscope/bin/cscope
        set csto=0
        "set cst
        set nocsverb
        " add any database in current directory
        if filereadable("cscope.out")
            cs add cscope.out
        " else add database pointed to by environment
        elseif $CSCOPE_DB != ""
            cs add $CSCOPE_DB
        " search to the root
        else
            let s:cscope_file = s:MyFindConfigFile('cscope.out')
            if len(s:cscope_file) > 0
                cs add s:cscope_file
            endif
        endif
        set csverb

        set cscopequickfix=s-,g-,d-,c-,t-,e-,f-,i-

        " Key Mappings {{{
        nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR>
        nmap <C-_>g :cs find g <C-R>=expand("<cword>")<CR><CR>
        nmap <C-_>c :cs find c <C-R>=expand("<cword>")<CR><CR>
        nmap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR>
        nmap <C-_>e :cs find e <C-R>=expand("<cword>")<CR><CR>
        nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
        nmap <C-_>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
        nmap <C-_>d :cs find d <C-R>=expand("<cword>")<CR><CR>
        " }}}
    endif
" }}}

" Key Mappings{{{
    " Normal Mode Key Mappings{{{
    nnoremap <C-n> :call <SID>NumberToggle()<cr>

    " Replace current word with the value in unnamed register
    nnoremap ss :call <SID>ReplaceCurrentWord()<CR>

    " Replace current word template
    nmap sa :%s/\<<c-r>=expand("<cword>")<cr>\>//<BS>

    " Help current word
    nnoremap <Leader>h :h <c-r>=expand('<cword>')<CR><CR>

    " map to open this file in split window
    nnoremap <Leader>ev :split $MYVIMRC.local<CR>
    nnoremap <Leader>sv :source $MYVIMRC.local<CR>

    " map to open marks list
    nnoremap <Leader><Leader>m :marks<CR>

    " map to open TODO in split window
    nnoremap <Leader>et :split ~/Dropbox/Documents/TODO.txt<CR>

    " format the whole source and restore previous view
    nnoremap <silent> g= :let b:winview=winsaveview()<CR>gg=G:call winrestview(b:winview)<CR>

    " map to surround a word with ""
    nnoremap <Leader>" viw<Esc>a"<Esc>hbi"<Esc>lel
    nnoremap <Leader>' viw<Esc>a'<Esc>hbi'<Esc>lel
    nnoremap <Leader>"" viW<Esc>a"<Esc>hBi"<Esc>lEl
    nnoremap <Leader>'' viW<Esc>a'<Esc>hBi'<Esc>lEl

    " NERD Tree for all tab, and auto mirror
    nnoremap <C-e> :NERDTreeTabsToggle<CR>:NERDTreeMirror<CR>

    " for easy resize window
    nnoremap <C-w>++ 10<C-w>+
    nnoremap <C-w>-- 10<C-w>-
    nnoremap <C-w>>> 10<C-w>>
    nnoremap <C-w><< 10<C-w><
    "}}}

    " Insert Mode Key Mappings{{{
    " disable the bad habit keys
    inoremap <silent> jk <Esc>l
    "}}}

    " Mappings for FuzzyFind{{{
    let g:fuf_modesDisable = []
    let g:fuf_mrufile_maxItem = 400
    let g:fuf_mrucmd_maxItem = 400
    nnoremap <silent> sj     :FufBuffer<CR>
    nnoremap <silent> sb     :FufBuffer<CR>
    nnoremap <silent> sk     :FufFileWithCurrentBufferDir<CR>
    nnoremap <silent> sK     :FufFileWithFullCwd<CR>
    nnoremap <silent> sf     :FufFile<CR>
    nnoremap <silent> sl     :FufCoverageFileChange<CR>
    nnoremap <silent> sL     :FufCoverageFileChange<CR>
    nnoremap <silent> s<C-l> :FufCoverageFileRegister<CR>
    nnoremap <silent> sd     :FufDirWithCurrentBufferDir<CR>
    nnoremap <silent> sD     :FufDirWithFullCwd<CR>
    nnoremap <silent> s<C-d> :FufDir<CR>
    nnoremap <silent> sM     :FufMruFile<CR>
    nnoremap <silent> sm     :FufMruFileInCwd<CR>
    nnoremap <silent> sc     :FufMruCmd<CR>
    nnoremap <silent> su     :FufBookmarkFile<CR>
    nnoremap <silent> s<C-u> :FufBookmarkFileAdd<CR>
    vnoremap <silent> s<C-u> :FufBookmarkFileAddAsSelectedText<CR>
    nnoremap <silent> si     :FufBookmarkDir<CR>
    nnoremap <silent> s<C-i> :FufBookmarkDirAdd<CR>
    nnoremap <silent> sT     :FufTag<CR>
    nnoremap <silent> st     :FufTag!<CR>
    nnoremap <silent> s<C-]> :FufTagWithCursorWord!<CR>
    nnoremap <silent> s,     :FufBufferTag<CR>
    nnoremap <silent> s<     :FufBufferTag!<CR>
    vnoremap <silent> s,     :FufBufferTagWithSelectedText!<CR>
    vnoremap <silent> s<     :FufBufferTagWithSelectedText<CR>
    nnoremap <silent> s}     :mark '\|:FufBufferTagWithCursorWord!<CR>
    nnoremap <silent> s.     :FufBufferTagAll<CR>
    nnoremap <silent> s>     :FufBufferTagAll!<CR>
    vnoremap <silent> s.     :FufBufferTagAllWithSelectedText!<CR>
    vnoremap <silent> s>     :FufBufferTagAllWithSelectedText<CR>
    nnoremap <silent> s]     :FufBufferTagAllWithCursorWord!<CR>
    "nnoremap <silent> sg     :FufTaggedFile<CR>
    "nnoremap <silent> sG     :FufTaggedFile!<CR>
    nnoremap <silent> so     :FufJumpList<CR>
    nnoremap <silent> sp     :FufChangeList<CR>
    nnoremap <silent> sq     :FufQuickfix<CR>
    nnoremap <silent> sy     :FufLine<CR>
    nnoremap <silent> sh     :FufHelp<CR>
    nnoremap <silent> se     :FufEditDataFile<CR>
    nnoremap <silent> sr     :FufRenewCache<CR>
    "}}}
    "For mark plugin{{{
    "nnoremap <Leader>// :MarkSearchAnyNext<CR>
    "}}}
    "For LookupFile plugin{{{
    nnoremap <silent> <F4> :LookupFile<CR>
    "}}}
    "For EasyMotion{{{
    nnoremap <silent> ff :call EasyMotion#F(0,0)<CR>
    nnoremap <silent> FF :call EasyMotion#F(0,1)<CR>
    nnoremap <silent> tt :call EasyMotion#T(0,0)<CR>
    nnoremap <silent> TT :call EasyMotion#T(0,1)<CR>
    nnoremap <silent> ww :call EasyMotion#WB(0,0)<CR>
    nnoremap <silent> WW :call EasyMotion#WBW(0,0)<CR>
    nnoremap <silent> bb :call EasyMotion#WB(0,1)<CR>
    nnoremap <silent> BB :call EasyMotion#WBW(0,1)<CR>
    nnoremap <silent> ee :call EasyMotion#E(0,0)<CR>
    nnoremap <silent> EE :call EasyMotion#EW(0,0)<CR>
    nnoremap <silent> gee :call EasyMotion#E(0,1)<CR>
    nnoremap <silent> gEE :call EasyMotion#EW(0,1)<CR>
    "nnoremap <silent> jjj :call EasyMotion#JK(0,0)<CR>
    "nnoremap <silent> kkk :call EasyMotion#JK(0,1)<CR>
    "nnoremap <silent> nn :call EasyMotion#Search(0,0)<CR>
    "nnoremap <silent> NN :call EasyMotion#Search(0,1)<CR>
    "}}}

    " Search for selected text, forwards or backwards {{{
    vnoremap <silent> * :<C-U>
      \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
      \gvy/<C-R><C-R>=substitute(
      \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
      \gV:call setreg('"', old_reg, old_regtype)<CR>
    vnoremap <silent> # :<C-U>
      \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
      \gvy?<C-R><C-R>=substitute(
      \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
      \gV:call setreg('"', old_reg, old_regtype)<CR>
    " }}}

    " Move line {{{
    " Normal mode
    nnoremap <C-j> :m .+1<CR>==
    nnoremap <C-k> :m .-2<CR>==

    " Insert mode
    inoremap <C-j> <ESC>:m .+1<CR>==gi
    inoremap <C-k> <ESC>:m .-2<CR>==gi

    " Visual mode
    vnoremap <C-j> :m '>+1<CR>gv=gv
    vnoremap <C-k> :m '<-2<CR>gv=gv
    "}}}
"}}}

" Plugin Configurations {{{

    "EasyMotion highlight{{{
    hi link EasyMotionTarget ErrorMsg
    hi link EasyMotionShade  Comment
    "}}}

    "Grep.vim {{{
    let Grep_Skip_Dirs = '.git .repo'
    "}}}

    "Syntastic {{{
    if has('win32') || has('win64')
        let g:syntastic_java_javac_temp_dir = $TEMP."\\vim-syntastic-javac"
    else
        let g:syntastic_java_javac_temp_dir = '/home/kurt/tmp/vim-syntastic-javac'
    endif

    let g:syntastic_java_javac_config_file_enabled = 1
    let g:syntastic_java_javac_config_file = s:MyFindConfigFile('.syntastic_javac_config')
    let g:syntastic_java_javac_autoload_maven_classpath = 0
    ""let g:syntastic_java_javac_delete_output = 0
    "}}}
"}}}

" Abbreviations {{{
    iabbrev adn and
    iabbrev waht what
    iabbrev tehn then
"}}}

" Auto CMDS {{{
"}}}

" Commands {{{
    command! -nargs=* Gdv !git difftool --tool=vimdiff --no-prompt 

    " Android related
    command! -nargs=0 -complete=command Croot call <SID>MyCd2AndroidRoot()

    " Close all buffers
    command! -nargs=0 -complete=command CloseAll call <SID>CloseAllBuffers('')
    command! -nargs=1 -complete=command CloseAllPattern call <SID>CloseAllBuffers(<f-args>)
    command! -nargs=0 -complete=command CloseOthers call <SID>CloseOtherBuffers()

    " Grep
    command! -nargs=* -complete=file Jgrep Grep <args> *.java
    command! -nargs=* -complete=file Jrgrep Rgrep <args> *.java
    command! -nargs=* -complete=file Jfgrep Fgrep <args> *.java
    command! -nargs=* -complete=file Jrfgrep Rfgrep <args> *.java
    command! -nargs=* -complete=file Jegrep Egrep <args> *.java
    command! -nargs=* -complete=file Jregrep Regrep <args> *.java
    command! -nargs=* -complete=file Jagrep Agrep <args> *.java
    command! -nargs=* -complete=file Jragrep Ragrep <args> *.java
    command! -nargs=* -complete=file JgrepAdd GrepAdd <args> *.java
    command! -nargs=* -complete=file JrgrepAdd RgrepAdd <args> *.java
    command! -nargs=* -complete=file JfgrepAdd FgrepAdd <args> *.java
    command! -nargs=* -complete=file JrfgrepAdd RfgrepAdd <args> *.java
    command! -nargs=* -complete=file JegrepAdd EgrepAdd <args> *.java
    command! -nargs=* -complete=file JregrepAdd RegrepAdd <args> *.java
    command! -nargs=* -complete=file JagrepAdd AgrepAdd <args> *.java
    command! -nargs=* -complete=file JragrepAdd RagrepAdd <args> *.java

    command! -nargs=* -complete=file Cgrep Grep <args> *.c *.cpp *.cc *.h
    command! -nargs=* -complete=file Crgrep Rgrep <args> *.c *.cpp *.cc *.h
    command! -nargs=* -complete=file Cfgrep Fgrep <args> *.c *.cpp *.cc *.h
    command! -nargs=* -complete=file Crfgrep Rfgrep <args> *.c *.cpp *.cc *.h
    command! -nargs=* -complete=file Cegrep Egrep <args> *.c *.cpp *.cc *.h
    command! -nargs=* -complete=file Cregrep Regrep <args> *.c *.cpp *.cc *.h
    command! -nargs=* -complete=file Cagrep Agrep <args> *.c *.cpp *.cc *.h
    command! -nargs=* -complete=file Cragrep Ragrep <args> *.c *.cpp *.cc *.h
    command! -nargs=* -complete=file CgrepAdd GrepAdd <args> *.c *.cpp *.cc *.h
    command! -nargs=* -complete=file CrgrepAdd RgrepAdd <args> *.c *.cpp *.cc *.h
    command! -nargs=* -complete=file CfgrepAdd FgrepAdd <args> *.c *.cpp *.cc *.h
    command! -nargs=* -complete=file CrfgrepAdd RfgrepAdd <args> *.c *.cpp *.cc *.h
    command! -nargs=* -complete=file CegrepAdd EgrepAdd <args> *.c *.cpp *.cc *.h
    command! -nargs=* -complete=file CregrepAdd RegrepAdd <args> *.c *.cpp *.cc *.h
    command! -nargs=* -complete=file CagrepAdd AgrepAdd <args> *.c *.cpp *.cc *.h
    command! -nargs=* -complete=file CragrepAdd RagrepAdd <args> *.c *.cpp *.cc *.h

    command! -nargs=* -complete=file Xmlgrep Grep <args> *.xml
    command! -nargs=* -complete=file Xmlrgrep Rgrep <args> *.xml
    command! -nargs=* -complete=file Xmlfgrep Fgrep <args> *.xml
    command! -nargs=* -complete=file Xmlrfgrep Rfgrep <args> *.xml
    command! -nargs=* -complete=file Xmlegrep Egrep <args> *.xml
    command! -nargs=* -complete=file Xmlregrep Regrep <args> *.xml
    command! -nargs=* -complete=file Xmlagrep Agrep <args> *.xml
    command! -nargs=* -complete=file Xmlragrep Ragrep <args> *.xml
    command! -nargs=* -complete=file XmlgrepAdd GrepAdd <args> *.xml
    command! -nargs=* -complete=file XmlrgrepAdd RgrepAdd <args> *.xml
    command! -nargs=* -complete=file XmlfgrepAdd FgrepAdd <args> *.xml
    command! -nargs=* -complete=file XmlrfgrepAdd RfgrepAdd <args> *.xml
    command! -nargs=* -complete=file XmlegrepAdd EgrepAdd <args> *.xml
    command! -nargs=* -complete=file XmlregrepAdd RegrepAdd <args> *.xml
    command! -nargs=* -complete=file XmlagrepAdd AgrepAdd <args> *.xml
    command! -nargs=* -complete=file XmlragrepAdd RagrepAdd <args> *.xml

    "command! -nargs=* Cbgrep Grep
    "command! -nargs=* CbgrepAdd BgrepAdd

    " Grep in current buffer
    command! -nargs=* -complete=file Lgrep Grep <args> %
    command! -nargs=* -complete=file LgrepAdd GrepAdd <args> %

    " no need to do syntax check when saving file
    command! -nargs=* -complete=command Nw noautocmd w

    " DiffOrig
    command! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis | wincmd p | diffthis

    " Add/Remove/List &tags
    command! -nargs=1 -complete=command AddTags call <SID>AddTags(<f-args>)
    command! -nargs=1 -complete=command RemoveTags call <SID>RemoveTags(<f-args>)
    command! -nargs=0 -complete=command ListTags call <SID>ListTags()
"}}}

" Auto cmds{{{
    if exists('g:spf13_no_autochdir') && g:spf13_no_autochdir == 1
        autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | call s:MyCd2RepoRoot('%:p:h') | endif
        " Always switch to the repo directory
    endif

    if exists('g:my_auto_add_tags') && g:my_auto_add_tags == 1
        autocmd FileType python autocmd BufEnter <buffer> call <SID>AddTags('py')
        autocmd FileType python autocmd BufLeave <buffer> call <SID>RemoveTags('py')
    endif
"}}}

" Banner Text {{{
    if exists('g:my_show_splash_screen')
        echo "                                             _.._                                              "
        echo "                                            (    )                                             "
        echo "                                        .--.\\   /                                             "
        echo "                                        ( )) \\_.-,                                            "
        echo "                                        _`\\  ( (( )                                           "
        echo "                                       ( ``|  |  |                                             "
        echo "                                        `|_|__|__|                                             "
        echo "                                        /_ __ _ __|                                            "
        echo "                                      .-L_7__7_7_7|                                            "
        echo "   _______                           (   ,----,  (`.                                           "
        echo "   \\ ::::;`.                         |  .\\ \\ / /.|  \\                                      "
        echo "   /    [|  \                        |  :-.-:-,-:|   `-------.                                 "
        echo "   \\    [|   `-.___________________.-'  |_:_Q_:_|`-._______)  `----------.._                  "
        echo "   /    [|         (       /   |        ::::::::: .------------------' (__) `.                 "
        echo "   \\    [|          `-----'    |                 /  .--.  .--. .--.  .--.    ;                "
        echo "   /_____;                     7----------------'  :    ;:    ;;   ;:    :  /                  "
        echo "   :::::::::-.               .'   S$S S$S S$S S$S   `--'  `--' `--'  `--' .'                   "
        echo "             ,)              |                            |::::::::|     (                     "
        echo "             0-------....._  |             _________      |        |      )                    "
        echo "             '             `.|           .:         :.    |        |    .'                     "
        echo "                             `-._        |           |    |________| .-'                       "
        echo "                                 `-..____|___________|_________...--'                          "
        echo "\n"
        echo "                        ¸¸♬·¯·♩¸¸♪·¯·♫¸¸Happy Coding¸¸♬·¯·♩¸¸♪·¯·♫¸¸                           "
        echo "\n"
    endif
"}}}
